/**
 *  Weather Station 2.0
 *
 *  Copyright 2014 Jason
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Weather Station 2.0",
    namespace: "",
    author: "Jason",
    description: "Weather App",
    category: "",

)


preferences {
    input("zipcode", "text", title: "ZipCode", description: "ZipCode of Forecast (leave blank to autodetect)")
}

metadata {
    definition (name: "Weather Station", author: "jnovack@gmail.com") {
      capability "Polling"
      capability "Relative Humidity Measurement"
      capability "Water Sensor"
      capability "Temperature Measurement"
    }

    simulator {
        // TODO: define status and reply messages here
    }

tiles {

valueTile("temperature", "device.temperature", width: 1, height: 1, canChangeIcon: true) {
            state("temperature", label: '${currentValue}°F', unit:"F", backgroundColors: [
                    [value: 31, color: "#153591"],
                    [value: 44, color: "#1e9cbb"],
                    [value: 59, color: "#90d2a7"],
                    [value: 74, color: "#44b621"],
                    [value: 84, color: "#f1d801"],
                    [value: 95, color: "#d04e00"],
                    [value: 96, color: "#bc2323"]
                ]
            )
        }
        
standardTile("refreshTile", "device.refresh", width: 1, height: 1, canChangeIcon: true, canChangeBackground: true, decoration: "flat") {
            state "ok", label: "", action: "update", icon: "st.secondary.refresh", backgroundColor: "#ffffff"
        }

def poll() {
    def weather

    // If there is a zipcode defined, use it, otherwise SmartThings will determine your current location from the Hub.
    if (settings.zipcode) {
        log.debug "ZipCode: ${settings.zipcode}"
        weather = getWeatherFeature( "conditions", settings.zipcode )
    } else {
        log.debug "ZipCode: (automatic)"
        weather = getWeatherFeature( "conditions" )
    }

def isRainDelay() { 
    def rainGauge = wasWetYesterday()+isWet()+isStormy()
    log.info ("Rain gauge reads $rainGauge in")
    if (rainGauge > (wetThreshold?.toFloat() ?: 0.5)) {
        log.trace "Watering is rain delayed"
        sendPush("Skipping watering today due to precipitation.")
        for(s in switches) {
            if("rainDelayed" in s.supportedCommands.collect { it.name }) {
                s.rainDelayed()
            }
        }
        if("rainDelayed" in schedulerVirtualDevice?.supportedCommands.collect { it.name }) {
            schedulerVirtualDevice.rainDelayed()
        }
        return true
    }
    return false
}

def wasWetYesterday() {
    if (!zipcode) return false

    def yesterdaysWeather = getWeatherFeature("yesterday", zipcode)
    def yesterdaysPrecip=yesterdaysWeather.history.dailysummary.precipi.toArray()
    def yesterdaysInches=safeToFloat(yesterdaysPrecip[0])
    log.info("Checking yesterdays percipitation for $zipcode: $yesterdaysInches in")
	return yesterdaysInches
}


def isWet() {
    if (!zipcode) return false

    def todaysWeather = getWeatherFeature("conditions", zipcode)
    def todaysInches = safeToFloat(todaysWeather.current_observation.precip_today_in)
    log.info("Checking percipitation for $zipcode: $todaysInches in")
    return todaysInches
}

def isStormy() {
    if (!zipcode) return false

    def forecastWeather = getWeatherFeature("forecast", zipcode)
    def forecastPrecip=forecastWeather.forecast.simpleforecast.forecastday.qpf_allday.in.toArray()
    def forecastInches=forecastPrecip[0]
    log.info("Checking forecast percipitation for $zipcode: $forecastInches in")
    return forecastInches
	}
    
def poll() {
    def weather

    // If there is a zipcode defined, use it, otherwise SmartThings will determine your current location from the Hub.
    if (settings.zipcode) {
        log.debug "ZipCode: ${settings.zipcode}"
        weather = getWeatherFeature( "conditions", settings.zipcode )
    } else {
        log.debug "ZipCode: (automatic)"
        weather = getWeatherFeature( "conditions" )
    }

    // Check if the variable is populated, otherwise return.
    if (!weather) {
        log.debug( "Something went wrong, no data found." )
        return false
        
    // Set the tiles
    log.debug( "Current Temperature: ${weather.current_observation.temp_f}ºF" )
    sendEvent( name: 'temperature', value: isRainDelay )
 } 
